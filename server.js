const express = require("express");
const cors = require("cors");

const app = express();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS (–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
app.use(cors({
  origin: "*",
  methods: "GET, POST, OPTIONS",
  allowedHeaders: "Content-Type, Authorization"
}));

// –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç middleware
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.header("Access-Control-Allow-Headers", "Content-Type, Authorization");
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π OPTIONS –∑–∞–ø—Ä–æ—Å
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  
  next();
});

app.use(express.json());

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç
app.get("/api/data", (req, res) => {
  res.json({ message: "–ü—Ä–∏–≤–µ—Ç –æ—Ç –±–µ–∫–µ–Ω–¥–∞!" });
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
const PORT = process.env.PORT || 5000;
if (process.env.NODE_ENV !== "production") {
  app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è Vercel
module.exports = app;